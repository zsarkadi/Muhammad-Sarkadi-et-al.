# Name: Thomas van Emden
# Data: September 11, 2019
# Processing (Gitter, rename and analyse) pictures from screens

##### Setup ####
# Clean Global Environment
rm(list = ls())

# Install and load necessary packages
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("EBImage")

install.packages('gitter')
require(gitter)

install.packages("gplots")
install.packages("LSD")
install.packages("RColorBrewer")
install.packages("plyr")
install.packages("filesstrings")
library(filesstrings)
library(LSD)
library(gplots)
library(RColorBrewer)
library(plyr)

#### Gitter #####
# This next block of code will run Gitter. This is a package that will quantify the size
# of the colonies on your photos.
# Remember you need to work with cropped images!

# First load the sample table and select the screens you want to combine
# Loading of sample table 
sampleTable <- read.csv("SampleTable.csv", header = TRUE, stringsAsFactors = FALSE, comment.char = "#", sep = ',')
# Selection of screen you want to combine
sampleTable <- subset(sampleTable, index >= 633 )
sampleTable <- subset(sampleTable, analyzed == "x")
sampleTable <- subset(sampleTable, cropped == "x")
sampleTable <- subset(sampleTable, sub == "4")
sampleTable <- subset(sampleTable, is.na(gittered))

# then run Gitter for each row in the sample table using this for loop:
for (h in 1:nrow(sampleTable)){
  # From the sample table extract necessary info
  screenName <- as.character(sampleTable$screen_name[h])
  workingDir <- as.character(sampleTable$location_results[h])
  
  # Remove data from a previous run of Gitter
  dir.remove(paste0(workingDir, "gitterData"))
  dir.remove(paste0(workingDir, "gitterGrid"))
  
  # Let Gitter work its magic, but first create directories for gitter output
  dir.create(paste0(workingDir, "gitterData"))
  dir.create(paste0(workingDir, "gitterGrid"))
  gitter.batch(workingDir, 
               ref.image.file = NULL, 
               plate.format = 384, 
               verbose = "p", 
               grid.save = paste0(workingDir, "gitterGrid") ,
               dat.save = paste0(workingDir, "gitterData"))
}

# Ignore this bit of code, I wrote it once, lets hope we don't need it. 
#  # Parse Gitter's output
#  filez <- list.files(path = workingDir)
#  for (i in filez){
#    setwd(workingDir) 
#    write.csv(read.csv(i, 
#                       comment.char = "#", 
#                       sep = "\t", 
#                       header = FALSE, 
#                       col.names = c("row", "col", "size", "circularity","flags")), 
#              i)
#  }

#### Rename #####
# Next step is to rename the output files from Gitter. This is necessary for the next 
# "Analysis" part of the script.
# Normally you can use the sample table that you have loaded in your Global environment
# for Gitter

# Rename gitter's output for each row in the sample table using this for loop:
for (h in 1:nrow(sampleTable)){
# From the sample table extract necessary info
  screenName <- as.character(sampleTable$screen_name[h])
  workingDir <- as.character(sampleTable$location_results[h])
  libPlateNumb <- as.numeric(sampleTable$libPlateNumb[h])
  media <- as.numeric(sampleTable$types_media[h])
  message(screenName)

  # Some settings we need for the upcoming loop
  filez <- list.files(path = paste0(workingDir, "gitterData/"),recursive = TRUE) # This makes a list of all files in the gitData directory
  filez <- paste0(workingDir, "gitterData/",filez)
  counter <- 0
  filenumber <- 1
  # Rename the files as they come from gitter
  if(media == 2){
    for (i in 1:libPlateNumb)
    {
      a <- filez[i+counter] # a will be 1,3,5, etc. b will be 2,4,6, etc.
      b <- filez[i+ 1 + counter]
      counter <- counter + 1
      file.rename(from=a, to = paste0(workingDir, "gitterData/",filenumber ,"med1", ".txt")) # Here the files will be renamed
      file.rename(from=b, paste0(workingDir, "gitterData/",filenumber ,"med2", ".txt"))
      filenumber <- filenumber + 1
    }
  } else if (media == 3 ){
    for (i in 1:libPlateNumb)
    {
      a <- filez[i+counter] # a will be 1,4,7 etc. b will be 2,5,8 etc. c will be 3,6,9 etc
      b <- filez[i+ 1 + counter]
      c <- filez[i+ 2 + counter]
      counter <- counter + 2
      file.rename(from=a, to = paste0(workingDir, "gitterData/",filenumber ,"med1", ".txt")) # Here the files will be renamed
      file.rename(from=b, paste0(workingDir, "gitterData/",filenumber ,"med2", ".txt"))
      file.rename(from=c, paste0(workingDir, "gitterData/",filenumber ,"med3", ".txt"))
      filenumber <- filenumber + 1
    }
  } else if (media == 4) {
    for (i in 1:libPlateNumb)
    {
      a <- filez[i+counter] # a will be 1,5,9, etc. b will be 2,6,10 etc. c will be 3,7,11, etc. d will be 4,8,12, etc.
      b <- filez[i+ 1 + counter]
      c <- filez[i+ 2 + counter]
      d <- filez[i+ 3 + counter]
      counter <- counter + 3
      file.rename(from=a, to = paste0(workingDir, "gitterData/",filenumber ,"med1", ".txt")) # Here the files will be renamed
      file.rename(from=b, paste0(workingDir, "gitterData/",filenumber ,"med2", ".txt"))
      file.rename(from=c, paste0(workingDir, "gitterData/",filenumber ,"med3", ".txt"))
      file.rename(from=d, paste0(workingDir, "gitterData/",filenumber ,"med4", ".txt"))
      filenumber <- filenumber + 1
    }
  } else {
    {
      a <- filez[i+counter] # a will be 1,5,9, etc. b will be 2,6,10 etc. c will be 3,7,11, etc. d will be 4,8,12, etc.
      b <- filez[i+ 1 + counter]
      c <- filez[i+ 2 + counter]
      d <- filez[i+ 3 + counter]
      e <- filez[i+ 4 + counter]
      counter <- counter + 4
      file.rename(from=a, to = paste0(workingDir, "gitterData/",filenumber ,"med1", ".txt")) # Here the files will be renamed
      file.rename(from=b, paste0(workingDir, "gitterData/",filenumber ,"med2", ".txt"))
      file.rename(from=c, paste0(workingDir, "gitterData/",filenumber ,"med3", ".txt"))
      file.rename(from=d, paste0(workingDir, "gitterData/",filenumber ,"med4", ".txt"))
      file.rename(from=e, paste0(workingDir, "gitterData/",filenumber ,"med5", ".txt"))
      filenumber <- filenumber + 1
    }
} }

#### Analysis #####
# To do the Analysis of the screen you use the for loop below. 
# Again you can use the sample table that you already have in your Global Environment

# Some settings you probably don't want to change, but are necessary to execute:
borderEffect <- "Y"
threshold <- 100
plateMED_med2_limit <- 2
datalist <- list()

# Loop that will go th`rough all experiments you selected using the sample table
for (h in 1:nrow(sampleTable)){
  # From the sample table extract necessary info
  screenName <- as.character(sampleTable$screen_name[h])
  libPlateNumb <- as.numeric(sampleTable$libPlateNumb[h])
  media <- as.numeric(sampleTable$types_media[h])
  type <- as.character(sampleTable$type[h])
  mutant <- as.character(sampleTable$mutant[h])
  assay_stress <- as.character(sampleTable$assay_stress[h])
  media1 <- as.character(sampleTable$media1[h])
  media2 <- as.character(sampleTable$media2[h])
  media3 <- as.character(sampleTable$media3[h])   
  media4 <- as.character(sampleTable$media4[h])
  media5 <- as.character(sampleTable$media5[h])
  #info_path <- paste0(as.character(sampleTable$infoPath[h]))
  #info_path <- "data/plateInfo/8PlateLibPombe/384-8format-plate"
  GitData <- paste0(as.character(sampleTable$location_results[h]),"gitterData/")
  message(screenName)

  # Start analysing plates
  for (i in 1:libPlateNumb)
  {
    # Define plate number (incrementing by 1 by each round, total number of plates is 8)
    plate <- paste("plate", i, sep="")
    #open data info and read into dataframe
    #plate_info <- read.delim(paste0(info_path, i, ".txt"), header = T)
    plate_info <- read.delim(paste0("data/plateInfo/", libPlateNumb,"PlateLibPombe/384-",libPlateNumb, "format-plate", i, ".txt"), header = T)
    plate_comb <- plate_info
    for (j in 1:media)
    {
      plate_path <- paste(GitData, i, "med", j, ".txt", sep="")
      data <- read.table(plate_path, header=F, fill = T) # note: header=F is different for HTgrid and spotsizer output
      data <- subset(data, data$V1 != "C" & data$V1 != "S" & data$V1 != "S,C" )
      data <- subset(data, select=-c(1:2, 4:5))
      colnames (data)[1] <- paste0("med", j)
      data <- cbind(plate_info, data)
      column <- paste0("med", j)
      if (borderEffect == "Y"){
        # Divide in Rings, nE indicates no Empties
        data_nE <- subset(data, data$mutID != "#N/A")
        ssMiddle <- subset(data, data$Ring >= 3)
        ssR1 <- subset(data, data$Ring == 1)
        ssR2 <- subset(data, data$Ring == 2)
        ssMiddle_nE <- subset(data_nE, data_nE$Ring >= 3)
        ssR1_nE <- subset(data_nE, data_nE$Ring == 1)
        ssR2_NE <- subset(data_nE, data_nE$Ring == 2)
        ##
        R1CorFac <- median(ssMiddle_nE[[column]]) / median(ssR1_nE[[column]])
        R2CorFac <- median(ssMiddle_nE[[column]]) / median(ssR2_NE[[column]])
        # Apply correction factor
        ssR1[[column]] <- ssR1[[column]]*R1CorFac
        ssR2[[column]] <- ssR2[[column]]*R2CorFac 
        data <- rbind(ssMiddle, ssR1, ssR2)
        data <- data[order(data$pos384),]
      }
      plate_comb <- cbind(plate_comb, data[column])
    }  
    
    #add new variables: ratio med2/med1, plate-MEDIAN, med2/med1 MEDnormalized and log2 values of med2/med1 MEDnormalized
    plate_comb$ratio_med2_med1<-plate_comb$med2/plate_comb$med1 #ratio med2/med1 added
    median_plate_med2 <- median(plate_comb$ratio_med2_med1, na.rm = TRUE) #plate median calculated
    plate_comb$MED_med2 <- median_plate_med2 #col with plate median added
    plate_comb$MEDnorm_med2 <-plate_comb$ratio_med2_med1 / median_plate_med2 #med2/med1 data median-normalized
    plate_comb$LOG2_med2 <- log2(plate_comb$MEDnorm_med2) #log2 value of med2/med1 med-norm data
    
    if(media >= 3){
      #as above but for -med3
      plate_comb$ratio_med3_med1<-plate_comb$med3/plate_comb$med1 #ratio med3/med1 added
      median_plate_med3 <- median(plate_comb$ratio_med3_med1, na.rm = TRUE) #ratio med3/med1 added
      plate_comb$MED_med3 <- median_plate_med3 #col with plate median added
      plate_comb$MEDnorm_med3 <-plate_comb$ratio_med3_med1 / median_plate_med3 #med3/med1 data median-normalized
      plate_comb$LOG2_med3 <- log2(plate_comb$MEDnorm_med3) #log2 value of med3/med1 med-norm data
    }
    
    if(media >= 4){
      #as above but for med4
      plate_comb$ratio_med4_med1<-plate_comb$med4/plate_comb$med1 #ratio med4/med1 added
      median_plate_med4 <- median(plate_comb$ratio_med4_med1, na.rm = TRUE) #ratio med4/med1 added
      plate_comb$MED_med4 <- median_plate_med4 #col with plate median added
      plate_comb$MEDnorm_med4 <-plate_comb$ratio_med4_med1 / median_plate_med4 #med4/med1 data median-normalized
      plate_comb$LOG2_med4 <- log2(plate_comb$MEDnorm_med4) #log2 value of med4/med1 med-norm data
    }
    
    #combined table assigned with new variable=plate_number
    assign(plate, plate_comb)
    
    #QC for each plate by checking the ratio of med2:med1 col- and row-wise for each plate
    par(mfrow = c(3,2), mar=c(2,2,2,2), bg="white")
    boxplot (med1~col, data=plate_comb, outline=F, main=paste(screenName, plate, "med1 - col - BC ", borderEffect))
    boxplot (med1~row, data=plate_comb, outline=F, main=paste(screenName, plate, "med1 - row - BC ", borderEffect))
    boxplot (med2~col, data=plate_comb, outline=F, main=paste(screenName, plate, "med2 - col - BC ", borderEffect))
    boxplot (med2~row, data=plate_comb, outline=F, main=paste(screenName, plate, "med2 - row - BC ", borderEffect))
    boxplot (ratio_med2_med1~col, data=plate_comb, outline=F, main=paste(screenName, plate, "med2:med1 - col - BC ", borderEffect))
    boxplot (ratio_med2_med1~row, data=plate_comb, outline=F, main=paste(screenName, plate, "med2:med1 - row - BC ", borderEffect))
    
    #define colors used for heatmap "pal" from the 'brewer' packages: 
    pal = rev(brewer.pal(11,"Spectral"))  
    
    #this following section has commented out to reduce total number of plots (there is only a limited number that can be shown in RStudio)
    #platemed1 <- plate_comb$med1
    #dim(platemed1) <- c(24,16)
    #heatmap.2(t(platemed1), main=paste(plate, "med1"), trace="none", key=T, col=pal, Rowv=F, Colv=F, na.color="grey", dendrogram="none")
    
    platemed2 <- plate_comb$med2
    dim(platemed2) <- c(24,16)
    heatmap.2(t(platemed2),  main=paste(plate, "med2"), trace="none", key=T, col=pal, Rowv=F, Colv=F, na.color="grey", dendrogram="none")
    
    plateMED <- plate_comb$MEDnorm_med2
    plateMED[plateMED==Inf] <- 0
    plateMED[plateMED>plateMED_med2_limit] <- NA
    dim(plateMED) <- c(24,16)
    heatmap.2(t(plateMED), main=paste(plate, "med2:med1 MEDnorm"), na.rm=TRUE,  trace="none", key=T, col=pal, Rowv=F, Colv=F, na.color="grey", dendrogram="none")
    
    # printout - this has no real function but indicates whether the loop goes through all plate
    message(plate)
    
    # Make a list of all plates analyse
    datalist[[i]] <- plate_comb
  }
  
  # Rbind all plates 
  plate_all <- do.call(rbind, datalist)
  
  #Removes all infinite values and replace it with "NA"
  is.na(plate_all) <- sapply(plate_all, is.infinite)
  #all plates (1-8) filtered for med1 (med4) defined by threshold)
  plate_all_filter <- subset (plate_all, plate_all$med1 > threshold)
  
  #all plates (1-8) with selected data (see below)
  if(media == 2){
    plate_all_log2 <- subset (plate_all, select=c("mutID", "gene", "med1", "med2", "LOG2_med2"), mutID != "#N/A")
  }else if (media == 3){
    plate_all_log2 <- subset (plate_all, select=c("mutID", "gene", "med1", "med2", "med3", "LOG2_med2", "LOG2_med3"), mutID != "#N/A")
  }else {
    plate_all_log2 <- subset (plate_all, select=c("mutID", "gene", "med1", "med2", "med3", "med4", "LOG2_med2", "LOG2_med3", "LOG2_med4"), mutID != "#N/A")
  }
  
  par(mfrow = c(2,2), mar=c(2,2,2,2), bg="white", col.axis="blue")
  boxplot(med2~plate, data=plate_all_filter, outline=F, main="med2")
  boxplot(med1~plate, data=plate_all_filter, outline=F, main="med1")
  boxplot(ratio_med2_med1~plate, data=plate_all_filter,outline=F,  main="ratio med2/med1")
  boxplot(MEDnorm_med2~plate, data=plate_all_filter, outline=F, main="median-norm med2 values")
  
  if(media==3){
    #distribution of med2:med1 and med3:med1 filtered
    par(mfrow = c(3,2), mar=c(2,2,2,2), col.axis="grey")
    hist(plate_all_filter$med1, breaks=100, col="yellow", xlim=c(0,1500), main="med1")
    hist(plate_all_filter$med1, breaks=100, col="yellow", xlim=c(0,1500), main="med1")
    hist(plate_all_filter$med2, breaks=100, col="red",  xlim=c(0,1500), main="med2")
    hist(plate_all_filter$LOG2_med2, breaks=100, col="blue", xlim=c(-2,2), main="med2:med1")
    hist(plate_all_filter$med3, breaks=200, col="red",  xlim=c(0,1500), main="med3")
  }
  
  if(media==3){
    hist(plate_all_filter$LOG2_med2, breaks=100, col="darkgreen",  xlim=c(-2,2), main="-med2:med1")
  }
  
  colClean <- function(x)
  { 
    for (k in 1:media)
    {
      colnames(x) <- gsub(paste0("MEDnorm_med", k), paste(type, get(paste0("media", k)), mutant, assay_stress,screenName, sep = "_"), colnames(x))
      colnames(x) <- gsub(paste0("LOG2_med", k), paste0(screenName,"_LOG2_", get(paste0("media", k))), colnames(x))
      colnames(x) <- gsub(paste0("ratio_med", k), paste0(screenName,"_ratio_", get(paste0("media", k))), colnames(x))
      colnames(x) <- gsub(paste0("MED_med", k), paste0(screenName,"_plateMED_", get(paste0("media", k))), colnames(x))
      colnames(x) <- gsub(paste0("med", k), get(paste0("media", k)), colnames(x))
    }
    ; x 
  } 
  plate_all <- colClean(plate_all)
  plate_all_filter <- colClean(plate_all_filter)
  plate_all_log2 <- colClean(plate_all_log2)
  
  # Remove excisting .txt result files
  file.remove(list.files(pattern = "\\.txt"))
  
  #save tables (plate 1-8, non-filtered and filtered) into files in the same directory as original data files
  write.table(plate_all, paste0(sampleTable$location_results[h],"/",screenName, "_non-filtered", ".txt"), sep="\t", row.names=F)
  write.table(plate_all_filter, paste0(sampleTable$location_results[h],"/",screenName, "_filtered_", threshold, ".txt"), sep="\t", row.names=F)
  write.table(plate_all_log2, paste0(sampleTable$location_results[h],"/",screenName, ".txt"), sep="\t", row.names=F)
}
`` 


